#!/usr/bin/env bash

# Colors
RED="\033[0;31m"
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
MAGENTA="\033[1;35m"
NC="\033[0m"

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="${SCRIPT_DIR}/config/magic-repair.conf"
search_terms=()

# Function to show usage
show_usage() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "OPTIONS:"
    echo "  -s TERM    Add search term for device names (can be used multiple times)"
    echo "  -h, --help Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 -s \"Magic\" -s \"Jonas\"     # Search for devices containing 'Magic' AND 'Jonas'"
    echo "  $0 -s \"Dell\" -s \"Tom\"        # Search for devices containing 'Dell' AND 'Tom'"
    echo ""
    echo "Configuration file:"
    echo "  If no search terms are provided via -s, the script will look for"
    echo "  a configuration file at: ${CONFIG_FILE}"
    echo ""
    echo "  Example configuration file content:"
    echo "  search_terms=\"Magic Jonas\""
    echo "  # or"
    echo "  search_terms=\"Dell Tom\""
}

# Function to read configuration file
read_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        # Source the config file in a subshell to avoid polluting current environment
        local config_search_terms
        config_search_terms=$(grep '^search_terms=' "$CONFIG_FILE" | cut -d'=' -f2- | tr -d '"' | tr -d "'")
        if [[ -n "$config_search_terms" ]]; then
            # Split the config search terms and add to array
            read -ra terms <<< "$config_search_terms"
            for term in "${terms[@]}"; do
                search_terms+=("$term")
            done
            return 0
        fi
    fi
    return 1
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -s)
            if [[ -n "$2" ]]; then
                search_terms+=("$2")
                shift 2
            else
                echo -e "${RED}‚ùå Error:${NC} -s requires a search term"
                exit 1
            fi
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Error:${NC} Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# If no search terms provided via arguments, try to read from config
if [[ ${#search_terms[@]} -eq 0 ]]; then
    if ! read_config; then
        echo -e "${RED}‚ùå Error:${NC} No search terms provided and no valid configuration found."
        echo ""
        show_usage
        exit 1
    fi
fi

# Validate that we have search terms
if [[ ${#search_terms[@]} -eq 0 ]]; then
    echo -e "${RED}‚ùå Error:${NC} No search terms available."
    echo ""
    show_usage
    exit 1
fi

# Check if blueutil is installed
if ! command -v blueutil &> /dev/null; then
    echo -e "${RED}‚ùå Error:${NC} 'blueutil' not found."
    echo -e "${YELLOW}Install with:${NC} brew install blueutil"
    exit 1
fi

# Check if jq is installed
if ! command -v jq &> /dev/null; then
    echo -e "${RED}‚ùå Error:${NC} 'jq' not found."
    echo -e "${YELLOW}Install with:${NC} brew install jq"
    exit 1
fi

unpair_device() {
    local mac="$1"
    local name="$2"
    echo -e "${BLUE}Disconnecting ${name}...${NC}"
    blueutil --unpair "$mac" &>/dev/null || true
}

pair_with_retries() {
    local mac="$1"
    local name="$2"
    local retries=3
    local wait_times=(2 5 10)

    for attempt in $(seq 1 $retries); do
        echo -e "\t${BLUE}üîó Pairing ‚Äì Attempt ${attempt}/${retries}${NC}"
        sleep "${wait_times[$((attempt-1))]}"
        if blueutil --pair "$mac" &>/dev/null; then
            echo -e "\t${GREEN}‚úÖ Pairing successful.${NC}"
            return 0
        fi
        echo -e "\t${YELLOW}‚ö†Ô∏è Pairing attempt ${attempt} failed.${NC}"
    done
    return 1
}

connect_with_retries() {
    local mac="$1"
    local name="$2"
    local retries=3
    local wait_times=(2 5 8)

    for attempt in $(seq 1 $retries); do
        echo -e "\t${BLUE}üîó Connecting ‚Äì Attempt ${attempt}/${retries}${NC}"
        sleep "${wait_times[$((attempt-1))]}"
        if blueutil --connect "$mac" &>/dev/null; then
            echo -e "\t${GREEN}‚úÖ Connection successful.${NC}"
            return 0
        fi
        echo -e "\t${YELLOW}‚ö†Ô∏è Connection attempt ${attempt} failed.${NC}"
    done
    return 1
}

restart_bluetooth() {
    echo -e "${BLUE}üîÑ Restarting bluetooth...${NC}"
    blueutil --power 0
    sleep 3
    blueutil --power 1
    sleep 3
}

# Build jq filter for search terms
build_jq_filter() {
    local filter_parts=()
    for term in "${search_terms[@]}"; do
        filter_parts+=("test(\"(?i)${term}\")")
    done
    # Join filter parts with ' and '
    local jq_filter
    jq_filter=$(printf "%s and " "${filter_parts[@]}")
    jq_filter="${jq_filter% and }"  # Remove trailing ' and '
    echo ".[] | select(.name | $jq_filter) | \"\(.address)|\(.name)\""
}

# Search for matching devices
echo ""
search_terms_display=$(IFS=', '; echo "'${search_terms[*]}'")
echo -e "${BLUE}üîç Searching for bluetooth devices with ${search_terms_display}...${NC}"
echo ""
devices=()
jq_filter=$(build_jq_filter)
while IFS= read -r line; do
    devices+=("$line")
done < <(blueutil --paired --format json | jq -r "$jq_filter")

if [[ ${#devices[@]} -eq 0 ]]; then
    echo -e "${RED}‚ùå No matching devices found. Please pair manually.${NC}"
    exit 1
fi

# Phase 1: Un-pair all devices in parallel
for dev in "${devices[@]}"; do
    mac="${dev%%|*}"
    name="${dev##*|}"
    unpair_device "$mac" "$name" &
done
wait
echo ""
echo -e "${GREEN}‚õìÔ∏è‚Äçüí•  Disconnected all matching devices.${NC}"
echo ""

# Phase 2: Pair + Connect devices one after another
for dev in "${devices[@]}"; do
    mac="${dev%%|*}"
    name="${dev##*|}"

    icon="‚å®Ô∏è"

    if [[ $name == *"Trackpad"* ]]; then
        icon="üñ±Ô∏è"
    elif [[ $name == *"Mouse"* ]]; then
        icon="üñ±Ô∏è"
    fi

    echo -e "${BLUE}${icon}  ${name}${NC}"

    if ! pair_with_retries "$mac" "$name"; then
        echo -e "${MAGENTA}‚ùì Pairing of ${name} failed. Restart Bluetooth? (y/n)${NC}"
        echo -e "${YELLOW}üí° Tipp: Turn your devices off and on again before executing.${NC}"
        read -r answer
        if [[ "$answer" == "y" ]]; then
            restart_bluetooth
            if ! pair_with_retries "$mac" "$name"; then
                echo -e "${RED}‚ùå Pairing of ${name} failed finally.${NC}"
                echo ""
                continue
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è Restarting bluetooth failed.${NC}"
            echo ""
            continue
        fi
    fi

    if ! connect_with_retries "$mac" "$name"; then
        echo -e "\t${RED}‚ùå Connecting ${name} failed.${NC}"
    fi
    echo ""
done

echo -e "${GREEN}üéâ Successfully re-paired your bluetooth devices.${NC}"